{"version":3,"file":"component---src-pages-index-js-5802b6139aa7d1a36ca2.js","mappings":"2LA+HA,UA1HkB,SAAC,GAkBjB,IAlByC,IAAD,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzB,EAAkCC,EAAAA,SAAe,MAA1CC,EAAP,KAAkBC,EAAlB,KAOMC,GAAY,UAAAL,EAAKM,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAS,UAAGT,EAAKM,KAAKC,oBAAb,aAAG,EAAwBF,UACpCK,EAAOV,EAAKW,KAAKD,KACjBE,EAAkBZ,EAAKa,YAAYC,MAErCC,EAAU,GAKLC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAAK,CAEpC,IAAIF,EAAQJ,EAAKM,GAAGF,MAAMI,MAAK,SAACC,EAAGC,GAEjC,OAAOA,EAAEC,KAAKC,YAAYC,KAAKC,cAAcL,EAAEE,KAAKC,YAAYC,KAAKC,kBAIvET,EAAO,kBAAOA,GAAP,CAAgB,CACrB,KAAQL,EAAKM,GAAGS,KAChB,MAASX,EACT,MAASJ,EAAKM,GAAGU,aAKrBX,EAAQG,MAAK,SAACC,EAAGC,GACf,OAAOA,EAAEN,MAAM,GAAGO,KAAKC,YAAYC,KAAKC,cAAcL,EAAEL,MAAM,GAAGO,KAAKC,YAAYC,SAGpFI,QAAQC,IAAIb,GAEZ,IAAMc,EAAS,SAACC,EAAML,GACpB,OACE,uBAAKM,UAAU,+CACb,gBAAC,EAAAC,KAAD,CAAMC,GAAE,IAAMH,EACZC,UAAS,SAAU5B,IAAc2B,GAAQ,eACzCI,QAAS,kBAAMC,EAAaL,KAC3BL,KAKHW,EAAQ,SAACA,GACb,OAAQ,0BACLA,MAAAA,OADK,EACLA,EAAOC,KAAI,SAAAC,GACV,OACE,sBAAIC,IAAKD,EAAEjB,KAAKmB,GAAIT,UAAU,qCAC5B,wBAAMA,UAAU,2BAA2BO,EAAEjB,KAAKC,YAAYC,MAC9D,gBAAC,EAAAS,KAAD,CACED,UAAU,OACVE,GAAIK,EAAEjB,KAAKoB,OAAOC,KAClBC,SAAS,OACRL,EAAEjB,KAAKC,YAAYd,aAS1B2B,EAAe,SAAAS,GACnBxC,EAAawC,IAGf,OACE,gBAAC,IAAD,CAAQ3C,SAAUA,EAAUO,MAAOH,EAAW0B,UAAU,cACtD,8BACE,uBAAKA,UAAU,iCAAf,6BACA,qBAAGc,KAAMpC,EAAWsB,UAAU,6CAA9B,sBAEF,gBAAC,IAAD,CAAKvB,MAAM,KAGVqB,EA/EuB,iBA+EK,kBAC5BO,EAAMxB,GAINiB,EAnFsB,gBAmFK,iBAE5B,0BACGd,EAAQsB,KAAI,SAAAS,GACX,OACE,sBAAIP,IAAKO,EAAIrB,MACX,uBACEM,UAAS,6CACTS,GAAIM,EAAIrB,MAER,gBAAC,EAAAO,KAAD,CACEC,GAAE,IAAMa,EAAIrB,KACZkB,SAAS,MACTZ,UAAS,SAAU5B,IAAc2C,EAAIrB,MAAQ,eAE7CS,QAAS,kBAAMC,EAAaW,EAAIrB,QAE/BqB,EAAIrB,KACL,iCAASqB,EAAIC,MAAb,OAKJ,sBAAIhB,UAAU,aACXK,EAAMU,EAAIhC","sources":["webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import { graphql, Link } from \"gatsby\"\nimport * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const [activeTag, setActiveTag] = React.useState(null)\n\n  // Constant(s).\n  const LINK_RECENTLY_ADDED = \"recently-added\";\n  const LINK_BY_CATEGORIES = \"by-categories\";\n\n  // Variables\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const githubUrl = data.site.siteMetadata?.siteTitle;\n  const tags = data.page.tags\n  const dataRecentPosts = data.recentPosts.edges;\n\n  let tagList = [];\n\n  // DISPLAY LIST BY CATEGORY AND SORT BY DATE (DESC)\n  // GASTBY have not supported sort in group by yet.\n  // So I have to sort it manually\n  for (let i = 0; i < tags.length; i++) {\n    // Sort sublist\n    let edges = tags[i].edges.sort((a, b) => {\n      // Sort date (desc)\n      return b.node.frontmatter.date.localeCompare(a.node.frontmatter.date.localeCompare);\n    });\n\n    // Create new list\n    tagList = [...tagList, {\n      \"name\": tags[i].name,\n      \"edges\": edges,\n      \"count\": tags[i].postCount\n    }]\n  }\n\n  // Sort final list\n  tagList.sort((a, b) => {\n    return b.edges[0].node.frontmatter.date.localeCompare(a.edges[0].node.frontmatter.date);\n  })\n\n  console.log(tagList);\n\n  const header = (link, name) => {\n    return (\n      <div className=\"text-2xl font-semibold font-serif mt-8 mb-4\">\n        <Link to={`#${link}`}\n          className={`pt-1 ${activeTag === link && \"targetClass\"}`}\n          onClick={() => toggleActive(link)}>\n          {name}\n        </Link>\n      </div>)\n  }\n\n  const posts = (posts) => {\n    return (<ul>\n      {posts?.map(p => {\n        return ((\n          <li key={p.node.id} className=\"flex flex-row link-item leading-7\">\n            <span className=\"flex-none text-gray-400\">{p.node.frontmatter.date}</span>\n            <Link\n              className=\"ml-5\"\n              to={p.node.fields.slug}\n              itemProp=\"url\">\n              {p.node.frontmatter.title}\n            </Link>\n\n          </li>\n        ))\n      })}\n    </ul>)\n  };\n\n  const toggleActive = tagName => {\n    setActiveTag(tagName)\n  }\n\n  return (\n    <Layout location={location} title={siteTitle} className=\"font-serif\">\n      <header>\n        <div className=\"text-4xl font-extrabold mt-10\">everyday: Development Log</div>\n        <a href={githubUrl} className=\"text-sm text-gray-500 cursor-pointer mt-1\">Github Repository</a>\n      </header>\n      <Seo title=\"\" />\n\n      {/* Recently added list */}\n      {header(LINK_RECENTLY_ADDED, \"Recently Added\")}\n      {posts(dataRecentPosts)}\n\n\n      {/* By Categories list */}\n      {header(LINK_BY_CATEGORIES, \"By Categories\")}\n      {/* Tags */}\n      <ul>\n        {tagList.map(tag => {\n          return (\n            <li key={tag.name}>\n              <div\n                className={`capitalize text-xl font-semibold mt-8 mb-4`}\n                id={tag.name}\n              >\n                <Link\n                  to={`#${tag.name}`}\n                  itemProp=\"url\"\n                  className={`pt-1 ${activeTag === tag.name && \"targetClass\"\n                    }`}\n                  onClick={() => toggleActive(tag.name)}\n                >\n                  {tag.name}\n                  <span> ({tag.count})</span>\n                </Link>\n              </div>\n\n              {/* Posts */}\n              <ul className=\"link-list\">\n                {posts(tag.edges)}\n              </ul>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    recentPosts: allMarkdownRemark(sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n          }\n          fields {\n            slug\n          }\n          id\n        }\n      }\n    }\n    page: allMarkdownRemark {\n      tags: group(field: frontmatter___tags) {\n        name: fieldValue\n        postCount: totalCount\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date(formatString: \"YYYY.MM.DD\")\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["data","location","React","activeTag","setActiveTag","siteTitle","site","siteMetadata","title","githubUrl","tags","page","dataRecentPosts","recentPosts","edges","tagList","i","length","sort","a","b","node","frontmatter","date","localeCompare","name","postCount","console","log","header","link","className","Link","to","onClick","toggleActive","posts","map","p","key","id","fields","slug","itemProp","tagName","href","tag","count"],"sourceRoot":""}